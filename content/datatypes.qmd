# Data Types

JavaScript has several built-in data types that form the foundation of how you'll work with data in your programs. Since you have experience with R and Python, I'll make some comparisons where helpful.

## Primitive Data Types

JavaScript has 7 primitive data types. These are immutable (cannot be changed) and are passed by value:

### Number

JavaScript uses a single number type for both integers and floating-point values.

```javascript
// Both integers and decimals use the same type
let integer = 42;
let decimal = 3.14;
let scientific = 2.998e8; // Scientific notation
```

Unlike R (which has numeric) or Python (which distinguishes between `int` and `float`), JavaScript simplifies all numbers into a single type based on the IEEE 754 standard (64-bit floating-point).

### String

Text data, surrounded by single quotes, double quotes, or backticks:

```javascript
let singleQuoted = 'Hello';
let doubleQuoted = "World";
let templateLiteral = `Hello ${singleQuoted}`; // Template literals (with backticks) allow variable interpolation
```

The backtick syntax (template literals) is particularly useful as it's similar to f-strings in Python or glue in R.

### Boolean

Represents logical values:

```javascript
let isTrue = true;
let isFalse = false;
```

### Undefined

Represents a variable that has been declared but not assigned a value:

```javascript
let undefinedVariable;
console.log(undefinedVariable); // Outputs: undefined
```

This is somewhat similar to `NULL` in R or `None` in Python, but with an important distinction...

### Null

Represents the intentional absence of any value:

```javascript
let emptyValue = null;
```

The difference between `undefined` and `null` often confuses beginners. Think of `undefined` as "no value yet" and `null` as "intentionally empty."

### Symbol

A newer type introduced in ES6 (2015) for creating unique identifiers:

```javascript
let uniqueId = Symbol('description');
```

You likely won't use these often as a beginner, but they're important for more advanced applications.

### BigInt

Another newer type for working with integers larger than the Number type can handle:

```javascript
let hugeNumber = 9007199254740991n; // The 'n' suffix indicates a BigInt
```

## Reference Data Types

These are **mutable** (can be changed) and are passed by reference:

### Object

The foundation of JavaScript, similar to dictionaries in Python or lists in R:

```javascript
let person = {
    name: 'John',
    age: 30,
    isStudent: false
};

// Accessing properties
console.log(person.name);       // Using dot notation
console.log(person['name']);    // Using bracket notation (like Python dictionaries)
```

### Array

A special type of object for storing ordered collections:

```javascript
let fruits = ['apple', 'banana', 'orange'];

// Accessing elements (zero-indexed, like in Python)
console.log(fruits[0]); // Outputs: 'apple'
```

Unlike R's vectors which are 1-indexed, JavaScript arrays are 0-indexed like Python lists.

### Function

Functions are actually objects in JavaScript:

```javascript
function greet(name) {
    return `Hello, ${name}!`;
}

// Functions can be assigned to variables
let sayHello = greet;
console.log(sayHello('John')); // Outputs: 'Hello, John!'
```

This is similar to how you can assign functions to variables in R and Python, but JavaScript treats functions as first-class objects more thoroughly.
